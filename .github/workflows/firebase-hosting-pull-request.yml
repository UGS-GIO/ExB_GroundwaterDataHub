name: Build and Deploy to Firebase Preview
on: pull_request
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  Build-and-Deploy:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download Experience Builder
        run: curl -o exb.zip "$(curl -s 'https://downloads.arcgis.com/dms/rest/download/secured/arcgis-experience-builder-1.15.zip?f=json&folder=software%2FExperienceBuilder%2F1.15' | python3 -c "import sys, json; print(json.load(sys.stdin)['url'])")"
      - name: Unzip Experience Builder
        run: unzip -q exb.zip -d exb
      # - name: Copy Custom Widgets
      # run: cp -r widgets/* exb/ArcGISExperienceBuilder/client/your-extensions/widgets
      - name: Copy Custom Themes
        run: cp -r themes/* exb/ArcGISExperienceBuilder/client/your-extensions/themes
      - name: Create App directory
        run: mkdir public && cd public && mkdir apps && cd apps
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Copy apps
        run: cp -r apps/* exb/ArcGISExperienceBuilder/server/public/apps
      - name: NPM install client folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: NPM install in server folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Build widgets - dev
        run: npm run build:dev
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Build widgets
        run: npm run build:prod
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Run download script
        run: |
          node -e "require('./server/src/middlewares/dev/apps/app-download.js').zipApp('0', 'app.zip')"
          ls -la  # This will show where the file is created
        working-directory: exb/ArcGISExperienceBuilder
        env:
          NODE_ENV: production
      - name: Unzip app zip
        run: |
          unzip -o -q app.zip -d app
          chmod -R 777 app
        working-directory: exb/ArcGISExperienceBuilder

      - name: Create Firebase config
        run: |
          cat > firebase.json << EOL
          {
            "hosting": {
              "public": "exb/ArcGISExperienceBuilder/app",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ]
            }
          }
          EOL
      
      # Create a simple HTML file with GTM & GA that will be included via Firebase hosting headers
      - name: Create analytics header script
        run: |
          mkdir -p public
          cat > public/analytics.js << EOL
          // Google Tag Manager
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','${GTM_ID}');
          
          // Google Analytics
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', '${GA_ID}');
          EOL
          
          # Create GTM iframe HTML
          cat > public/gtm-body.html << EOL
          <!-- Google Tag Manager (noscript) -->
          <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=${GTM_ID}"
          height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
          <!-- End Google Tag Manager (noscript) -->
          EOL
        env:
          GTM_ID: ${{ secrets.GTM_ID }}
          GA_ID: ${{ secrets.GA_ID }}
      
      # Use Firebase hosting magic: create a custom header that injects our scripts
      - name: Create Firebase headers configuration
        run: |
          cat > firebase-hosting-config.json << EOL
          {
            "hosting": {
              "headers": [
                {
                  "source": "**/*.html",
                  "headers": [
                    {
                      "key": "Content-Security-Policy",
                      "value": "script-src 'self' 'unsafe-inline' https://js.arcgis.com https://*.arcgisonline.com https://www.googletagmanager.com https://www.google-analytics.com https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; object-src 'self'; connect-src 'self' https://*.arcgis.com https://*.arcgisonline.com https://www.google-analytics.com https://analytics.google.com https://maps.googleapis.com https://www.googletagmanager.com;"
                    }
                  ]
                }
              ],
              "rewrites": [
                {
                  "source": "/analytics.js",
                  "destination": "/analytics.js"
                },
                {
                  "source": "/gtm-body.html",
                  "destination": "/gtm-body.html"
                }
              ]
            }
          }
          EOL
      
      # Create an index.js file that will inject our scripts
      - name: Create index.js injector
        run: |
          mkdir -p exb/ArcGISExperienceBuilder/app/analytics
          cat > exb/ArcGISExperienceBuilder/app/analytics/inject.js << EOL
          // This file injects analytics scripts into the page
          document.addEventListener('DOMContentLoaded', function() {
            // Load Google Tag Manager JS
            var gtmScript = document.createElement('script');
            gtmScript.src = '/analytics.js';
            document.head.appendChild(gtmScript);
            
            // Load Google Analytics script
            var gaScript = document.createElement('script');
            gaScript.async = true;
            gaScript.src = 'https://www.googletagmanager.com/gtag/js?id=${GA_ID}';
            document.head.appendChild(gaScript);
            
            // Inject GTM noscript iframe
            fetch('/gtm-body.html')
              .then(response => response.text())
              .then(html => {
                var tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                document.body.insertBefore(tempDiv.firstChild, document.body.firstChild);
              });
          });
          EOL
        env:
          GA_ID: ${{ secrets.GA_ID }}
      
      # Find all HTML files and inject our script reference
      - name: Inject script references
        run: |
          find exb/ArcGISExperienceBuilder/app -name "*.html" -print0 | while IFS= read -r -d '' htmlfile; do
            echo "Adding analytics script to: $htmlfile"
            
            # Create a backup
            cp "$htmlfile" "${htmlfile}.bak"
            
            # Insert our script right before the closing </head> tag
            sed -i 's|</head>|<script src="/analytics/inject.js"></script></head>|' "$htmlfile"
            
            # Verify the changes
            if grep -q "analytics/inject.js" "$htmlfile"; then
              echo "✅ Script reference added successfully"
              rm "${htmlfile}.bak"
            else
              echo "❌ Failed to add script reference, restoring backup"
              mv "${htmlfile}.bak" "$htmlfile"
            fi
          done

      - name: Deploy to Firebase Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UT_DNR_UGS_GWDATAHUB_DEV }}
          projectId: ut-dnr-ugs-gwdatahub-dev
          channelId: preview