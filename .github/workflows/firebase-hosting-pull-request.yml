name: Build and Deploy to Firebase Preview
on: pull_request
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  Build-and-Deploy:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download Experience Builder
        run: curl -o exb.zip "$(curl -s 'https://downloads.arcgis.com/dms/rest/download/secured/arcgis-experience-builder-1.15.zip?f=json&folder=software%2FExperienceBuilder%2F1.15' | python3 -c "import sys, json; print(json.load(sys.stdin)['url'])")"
      - name: Unzip Experience Builder
        run: unzip -q exb.zip -d exb
      # - name: Copy Custom Widgets
      # run: cp -r widgets/* exb/ArcGISExperienceBuilder/client/your-extensions/widgets
      - name: Copy Custom Themes
        run: cp -r themes/* exb/ArcGISExperienceBuilder/client/your-extensions/themes
      - name: Create App directory
        run: mkdir public && cd public && mkdir apps && cd apps
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Copy apps
        run: cp -r apps/* exb/ArcGISExperienceBuilder/server/public/apps
      - name: NPM install client folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: NPM install in server folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Build widgets - dev
        run: npm run build:dev
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Build widgets
        run: npm run build:prod
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Run download script
        run: |
          node -e "require('./server/src/middlewares/dev/apps/app-download.js').zipApp('0', 'app.zip')"
          ls -la  # This will show where the file is created
        working-directory: exb/ArcGISExperienceBuilder
        env:
          NODE_ENV: production
      - name: Unzip app zip
        run: |
          unzip -o -q app.zip -d app
          chmod -R 777 app
        working-directory: exb/ArcGISExperienceBuilder

      - name: Inject Google Analytics and Tag Manager
        run: |
          # Create the analytics script content
          cat > /tmp/head_script.txt << EOL
          <!-- Google tag (gtag.js) -->
          <script async src="https://www.googletagmanager.com/gtag/js?id=${GA_ID}"></script>
          <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
          
            gtag('config', '${GA_ID}');
          </script>
          <!-- Google Tag Manager -->
          <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','${GTM_ID}');</script>
          <!-- End Google Tag Manager -->
          EOL
          
          cat > /tmp/body_script.txt << EOL
          <!-- Google Tag Manager (noscript) -->
          <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=${GTM_ID}"
          height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
          <!-- End Google Tag Manager (noscript) -->
          EOL
          
          # Find all HTML files
          find exb/ArcGISExperienceBuilder/app -name "*.html" -print0 | while IFS= read -r -d '' htmlfile; do
            echo "Processing file: $htmlfile"
            
            # Create a backup
            cp "$htmlfile" "${htmlfile}.bak"
            
            # VERY SPECIFIC: Insert head scripts right after the </style> tag following the <head> tag
            # First count how many lines to skip to find the first </style> after <head>
            head_line=$(grep -n "<head>" "$htmlfile" | head -1 | cut -d: -f1)
            first_style_end_after_head=$(tail -n +$head_line "$htmlfile" | grep -n "</style>" | head -1 | cut -d: -f1)
            
            if [ -n "$first_style_end_after_head" ]; then
              # Calculate the actual line number
              first_style_end_line=$((head_line + first_style_end_after_head - 1))
              
              # Use sed to insert after this specific </style> tag
              sed -i "${first_style_end_line}r /tmp/head_script.txt" "$htmlfile"
              echo "✅ Head scripts inserted after line $first_style_end_line"
            else
              # Fallback: insert after the first script tag in head
              sed -i "/<head>/{n;r /tmp/head_script.txt
              }" "$htmlfile"
              echo "⚠️ Using fallback method for head scripts"
            fi
            
            # VERY SPECIFIC: Insert body scripts after the first </div> in the body
            body_line=$(grep -n "<body>" "$htmlfile" | head -1 | cut -d: -f1)
            first_div_end_after_body=$(tail -n +$body_line "$htmlfile" | grep -n "</div>" | head -1 | cut -d: -f1)
            
            if [ -n "$first_div_end_after_body" ]; then
              # Calculate the actual line number
              first_div_end_line=$((body_line + first_div_end_after_body - 1))
              
              # Use sed to insert after this specific </div> tag
              sed -i "${first_div_end_line}r /tmp/body_script.txt" "$htmlfile"
              echo "✅ Body scripts inserted after line $first_div_end_line"
            else
              # Fallback: insert right after body tag
              sed -i "/<body>/{n;r /tmp/body_script.txt
              }" "$htmlfile"
              echo "⚠️ Using fallback method for body scripts"
            fi
            
            # Verify the changes
            if grep -q "${GA_ID}" "$htmlfile" && grep -q "${GTM_ID}" "$htmlfile"; then
              echo "✅ Analytics codes successfully injected"
              rm "${htmlfile}.bak"
            else
              echo "❌ Failed to inject analytics, restoring backup"
              mv "${htmlfile}.bak" "$htmlfile"
            fi
          done
        env:
          GTM_ID: ${{ secrets.GTM_ID }}
          GA_ID: ${{ secrets.GA_ID }}

      - name: Deploy to Firebase Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UT_DNR_UGS_GWDATAHUB_DEV }}
          projectId: ut-dnr-ugs-gwdatahub-dev
          channelId: preview